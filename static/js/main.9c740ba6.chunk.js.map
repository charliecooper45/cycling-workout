{"version":3,"sources":["Options.js","Interval.js","Intervals.js","Output.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["OptionsDiv","styled","div","_templateObject","AddIntervalButton","button","_templateObject2","CopyOutputButton","_templateObject3","Options","dispatch","useContext","IntervalContext","output","OutputContext","clipboard","useClipboard","copiedTimeout","react_default","a","createElement","onClick","type","disabled","copy","copied","IntervalDiv","Interval_templateObject","props","valid","LabelSpan","span","Interval_templateObject2","TimeSpan","Interval_templateObject3","WattsSpan","_templateObject4","RepeatsSpan","_templateObject5","OptionsSpan","_templateObject6","Interval","_ref","id","_useContext","intervals","handleUpdateInterval","event","_event$target","target","value","maxLength","includes","length","numberValue","Number","updatedInterval","Object","objectSpread","interval","defineProperty","wattsMaximum","hours","minutes","seconds","wattsMinimum","repeats","validateInterval","find","min","onChange","IntervalsDiv","Intervals_templateObject","Intervals","map","src_Interval","key","OutputHeader","h2","Output_templateObject","Output","_useContext2","setOutput","validIntervals","filter","newOutput","reduce","accumulator","wattsOutput","concat","timeOutput","intervalString","MainDiv","Main_templateObject","SiteHeader","h1","Main_templateObject2","Main","src_Output","src_Options","src_Intervals","initialIntervals","intervalReducer","state","action","newInterval","uuid","toConsumableArray","Error","createContext","GlobalStyle","createGlobalStyle","App_templateObject","App","_useReducer","useReducer","_useReducer2","slicedToArray","_useState","useState","_useState2","Provider","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c740ba6.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { IntervalContext, OutputContext } from \"./App\";\nimport styled from \"styled-components\";\nimport { useClipboard } from \"use-clipboard-copy\";\n\nconst OptionsDiv = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 5px;\n  min-height: 25px;\n  margin-bottom: 10px;\n\n  @media (min-width: 600px) {\n    grid-template-columns: 1fr auto auto;\n  }\n`;\n\nconst AddIntervalButton = styled.button`\n  min-width: 140px;\n  min-height: 40px;\n  justify-self: end;\n\n  @media (min-width: 600px) {\n    grid-column: 2;\n  }\n`;\n\nconst CopyOutputButton = styled.button`\n  min-width: 140px;\n  justify-self: start;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nconst Options = () => {\n  const { dispatch } = useContext(IntervalContext);\n  const { output } = useContext(OutputContext);\n  const clipboard = useClipboard({\n    copiedTimeout: 800\n  });\n\n  const handleAddInterval = () =>\n    dispatch({\n      type: \"ADD_INTERVAL\"\n    });\n\n  const handleCopyOutput = () => clipboard.copy(output);\n\n  return (\n    <OptionsDiv>\n      <AddIntervalButton onClick={handleAddInterval}>\n        ADD INTERVAL\n      </AddIntervalButton>\n      <CopyOutputButton disabled={output === null} onClick={handleCopyOutput}>\n        {clipboard.copied ? \"COPIED!\" : \"COPY TO CLIPBOARD\"}\n      </CopyOutputButton>\n    </OptionsDiv>\n  );\n};\n\nexport default Options;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { IntervalContext } from \"./App\";\n\nconst IntervalDiv = styled.div`\n  background-color: rgba(245, 247, 250, 1);\n  box-shadow: 0 2px 5px 0px\n    ${props => (props.valid ? \"rgba(0, 0, 0, 0.2)\" : \"rgba(250, 40, 40, 0.2)\")};\n  border-radius: 10px;\n  display: grid;\n  grid-template-columns: auto 4fr auto auto;\n  grid-template-rows: auto 40px;\n  grid-column-gap: 5px;\n  padding: 10px 2px 10px 2px;\n\n  input {\n    min-width: 30px;\n    font-size: 1em;\n  }\n\n  @media (min-width: 600px) {\n    grid-column-gap: 40px;\n    grid-row-gap: 2px;\n    padding: 10px 10px 15px 10px;\n  }\n`;\n\nconst LabelSpan = styled.span`\n  display: grid;\n  font-size: 0.5em;\n  justify-items: start;\n  align-items: end;\n\n  &#repeats-label {\n    grid-column: 3 / -1;\n  }\n\n  @media (min-width: 600px) {\n    font-size: 1em;\n  }\n`;\n\nconst TimeSpan = styled.span`\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: repeat(5, auto);\n\n  input {\n    max-width: 50px;\n  }\n\n  span {\n    margin: auto;\n  }\n`;\n\nconst WattsSpan = styled.span`\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: 1fr auto 1fr;\n\n  span {\n    margin: auto;\n  }\n`;\n\nconst RepeatsSpan = styled.span`\n  display: grid;\n\n  input {\n    max-width: 50px;\n  }\n`;\n\nconst OptionsSpan = styled.span`\n  display: grid;\n`;\n\nconst Interval = ({ id }) => {\n  const { intervals, dispatch } = useContext(IntervalContext);\n\n  const handleRemoveInterval = () => dispatch({ type: \"REMOVE_INTERVAL\", id });\n\n  const validateInterval = updatedInterval => {\n    const {\n      hours,\n      minutes,\n      seconds,\n      wattsMinimum,\n      wattsMaximum,\n      repeats\n    } = updatedInterval;\n\n    // user must specify a time period\n    if (hours <= 0 && minutes <= 0 && seconds <= 0) return false;\n\n    // min must be above or equal to max\n    if (wattsMinimum > wattsMaximum) return false;\n\n    // at least one repeat\n    if (repeats <= 0) return false;\n\n    return true;\n  };\n\n  const handleUpdateInterval = event => {\n    const {\n      target: { id, value }\n    } = event;\n\n    // restrict watts to less than 5 digits, time fields to less than 3\n    const maxLength = [\"wattsMinimum\", \"wattsMaximum\"].includes(id) ? 4 : 2;\n    if (value.length > maxLength) return;\n\n    // if minutes or seconds then do not allow user to enter more than 59\n    const numberValue = Number(value);\n    if ([\"minutes\", \"seconds\"].includes(id) && numberValue > 59) return;\n\n    const updatedInterval = {\n      ...interval,\n      [id]: numberValue\n    };\n\n    // if user updates minimum watts then set maximum watts if it's below\n    if (id === \"wattsMinimum\") {\n      const { wattsMaximum } = interval;\n      if (numberValue > wattsMaximum) {\n        updatedInterval.wattsMaximum = numberValue;\n      }\n    }\n\n    // validate the interval\n    const valid = validateInterval(updatedInterval);\n\n    dispatch({\n      type: \"UPDATE_INTERVAL\",\n      interval: { ...updatedInterval, valid }\n    });\n  };\n\n  const interval = intervals.find(interval => interval.id === id);\n  const {\n    hours,\n    minutes,\n    seconds,\n    wattsMinimum,\n    wattsMaximum,\n    repeats,\n    valid\n  } = interval;\n\n  return (\n    <IntervalDiv valid={valid}>\n      <LabelSpan>Time (hours, mins, secs)</LabelSpan>\n      <LabelSpan>Watts (min, max)</LabelSpan>\n      <LabelSpan id=\"repeats-label\">Repeats</LabelSpan>\n      <TimeSpan>\n        <input\n          id=\"hours\"\n          type=\"number\"\n          min=\"0\"\n          maxLength=\"2\"\n          value={hours}\n          onChange={handleUpdateInterval}\n        />\n        <span>:</span>\n        <input\n          id=\"minutes\"\n          type=\"number\"\n          min=\"0\"\n          maxLength=\"2\"\n          value={minutes}\n          onChange={handleUpdateInterval}\n        />\n        <span>:</span>\n        <input\n          id=\"seconds\"\n          type=\"number\"\n          min=\"0\"\n          maxLength=\"2\"\n          value={seconds}\n          onChange={handleUpdateInterval}\n        />\n      </TimeSpan>\n      <WattsSpan>\n        <input\n          id=\"wattsMinimum\"\n          type=\"number\"\n          min=\"0\"\n          maxLength=\"4\"\n          value={wattsMinimum}\n          onChange={handleUpdateInterval}\n        />\n        <span>&rarr;</span>\n        <input\n          id=\"wattsMaximum\"\n          type=\"number\"\n          min=\"1\"\n          maxLength=\"4\"\n          value={wattsMaximum}\n          onChange={handleUpdateInterval}\n        />\n      </WattsSpan>\n      <RepeatsSpan>\n        <input\n          id=\"repeats\"\n          type=\"number\"\n          min=\"1\"\n          maxLength=\"2\"\n          value={repeats}\n          onChange={handleUpdateInterval}\n        />\n      </RepeatsSpan>\n      <OptionsSpan>\n        <button onClick={handleRemoveInterval}>DELETE</button>\n      </OptionsSpan>\n    </IntervalDiv>\n  );\n};\n\nInterval.propTypes = {\n  id: PropTypes.string.isRequired\n};\n\nexport default Interval;\n","import React, { useContext } from \"react\";\nimport Interval from \"./Interval\";\nimport styled from \"styled-components\";\nimport { IntervalContext } from \"./App\";\n\nconst IntervalsDiv = styled.div`\n  display: grid;\n  grid-auto-rows: 1fr;\n  grid-gap: 10px;\n`;\n\nconst Intervals = () => {\n  const { intervals } = useContext(IntervalContext);\n  return (\n    <IntervalsDiv>\n      {intervals.map(({ id }) => (\n        <Interval key={id} id={id} />\n      ))}\n    </IntervalsDiv>\n  );\n};\n\nexport default Intervals;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { IntervalContext, OutputContext } from \"./App\";\n\nconst OutputHeader = styled.h2`\n  font-size: 0.8em;\n\n  @media (min-width: 600px) {\n    font-size: 2em;\n  }\n`;\n\nconst Output = () => {\n  const { intervals } = useContext(IntervalContext);\n  const { output, setOutput } = useContext(OutputContext);\n\n  const validIntervals = intervals.filter(interval => interval.valid);\n  let newOutput = null;\n  if (validIntervals.length > 0) {\n    newOutput = validIntervals.reduce((accumulator, interval) => {\n      const {\n        hours,\n        minutes,\n        seconds,\n        wattsMinimum,\n        wattsMaximum,\n        repeats\n      } = interval;\n\n      const wattsOutput =\n        wattsMinimum === wattsMaximum\n          ? wattsMinimum\n          : `${wattsMinimum}-${wattsMaximum}`;\n\n      let timeOutput = ``;\n      if (hours > 0) {\n        timeOutput = timeOutput + `${hours}h `;\n      }\n      if (minutes > 0) {\n        timeOutput = timeOutput + `${minutes}m `;\n      }\n      if (seconds > 0) {\n        timeOutput = timeOutput + `${seconds}s `;\n      }\n\n      const intervalString =\n        repeats === 1\n          ? `${timeOutput}@ ${wattsOutput}w`\n          : `${repeats} x ${timeOutput}@ ${wattsOutput}w`;\n\n      return accumulator === \"\"\n        ? intervalString\n        : `${accumulator}, ${intervalString}`;\n    }, \"\");\n  }\n  setOutput(newOutput);\n\n  return (\n    <OutputHeader>{output || \"Add an interval to get started!\"}</OutputHeader>\n  );\n};\n\nexport default Output;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Options from \"./Options\";\nimport Intervals from \"./Intervals\";\nimport Output from \"./Output\";\n\nconst MainDiv = styled.div`\n  background-color: rgba(245, 247, 250, 0.5);\n  box-shadow: 0 2px 5px 0px rgba(0, 0, 0, 0.2);\n  height: 100vh;\n  text-align: center;\n  overflow: auto;\n\n  @media (min-width: 600px) {\n    grid-column: 2;\n    padding: 0 20px;\n    min-width: 500px;\n  }\n`;\n\nconst SiteHeader = styled.h1`\n  transform: skew(-10deg);\n  font-size: 1.4em;\n\n  @media (min-width: 600px) {\n    font-size: 4.5em;\n  }\n`;\n\nconst Main = () => {\n  return (\n    <MainDiv>\n      <SiteHeader>cycling-workout</SiteHeader>\n      <Output />\n      <Options />\n      <Intervals />\n    </MainDiv>\n  );\n};\n\nexport default Main;\n","import React, { useReducer, useState, createContext } from \"react\";\nimport uuid from \"uuid/v4\";\nimport { createGlobalStyle } from \"styled-components\";\nimport Main from \"./Main\";\n\nconst initialIntervals = [];\n\nconst intervalReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_INTERVAL\":\n      const newInterval = {\n        id: uuid(),\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        wattsMinimum: 1,\n        wattsMaximum: 1,\n        repeats: 1,\n        valid: false\n      };\n      return [...state, newInterval];\n    case \"REMOVE_INTERVAL\":\n      return state.filter(interval => interval.id !== action.id);\n    case \"UPDATE_INTERVAL\":\n      return state.map(interval => {\n        return interval.id === action.interval.id ? action.interval : interval;\n      });\n    default:\n      throw new Error();\n  }\n};\n\nexport const IntervalContext = createContext(null);\nexport const OutputContext = createContext(null);\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Patua+One&display=swap');\n  \n  html {\n    box-sizing: border-box;\n    font-family: 'Patua One', cursive;\n  }\n  \n  body {\n    margin: 0;\n    background-image: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n    color: #231d6e;\n    user-select: none;\n  }\n\n  #root {\n    display: grid;\n    grid-template-columns: 1fr;\n  }\n  \n  button, input {\n    &:focus {\n      outline: 0;\n    }\n  }\n  \n  button {\n    border-radius: 10px;\n    box-shadow: 0 2px 5px 0px rgba(0, 0, 0, 0.2);\n    font-size: 0.5em;\n    \n    &:hover {\n      cursor: pointer;\n      background: #F8F8F8;\n    }\n  }\n  \n  input {\n    border-radius: 4px;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    text-align: center;\n  }\n  \n  @media (min-width: 600px) {\n    #root {\n      grid-template-columns: 1fr 500px 1fr;\n    }\n    \n    button {\n      font-size: 0.8em;\n    }\n  }\n  \n  @media (min-width: 800px) {\n    #root {\n      grid-template-columns: 1fr 1000px 1fr;\n    }\n  }\n`;\n\nconst App = () => {\n  const [intervals, dispatch] = useReducer(intervalReducer, initialIntervals);\n  const [output, setOutput] = useState(null);\n\n  return (\n    <IntervalContext.Provider value={{ intervals, dispatch }}>\n      <OutputContext.Provider value={{ output, setOutput }}>\n        <GlobalStyle />\n        <Main />\n      </OutputContext.Provider>\n    </IntervalContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}